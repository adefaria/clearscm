<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template context="perl" description="Perl Script Starter" enabled="true" name="perl">#!${interpreter}
use strict;
use warnings;

${cursor}</template><template context="perl" description="Perl Package Starter" enabled="true" name="package">package ${packagename};

${cursor}</template><template context="perl" description="Subroutine" enabled="true" name="sub">sub ${cursor}${name} () {&#13;
  my () = @_;&#13;
} # ${name}</template><template context="perl" description="Frame comment for code structure commentation" enabled="true" name="#Boxed Comment">#-------------------------------------------------------------------
#  ${cursor}
#-------------------------------------------------------------------</template><template context="perl" description="Perl function comment" enabled="true" name="#Function Comment">#===  FUNCTION  ================================================================
#  NAME:        ${name}
#  PURPOSE:     ${purpose}
#  DESCRIPTION: ${describtion}
#  PARAMETERS:  ${params}
#  RETURNS:     ${return}
#===============================================================================</template><template context="perl" description="Perl file comment" enabled="true" name="#File Comment">#!/usr/bin/perl
#===============================================================================
#
#  FILE:        ${filename}
#
#  USAGE:       ./${filename} ${options}
#
#  DESCRIPTION: ${description}
#
# OPTIONS:      ${options}
# REQUIREMENTS: ---
# BUGS:         ---
# NOTES:        ---
# AUTHOR:       ${user}
# COMPANY:      ---
# VERSION:      1.0
# CREATED:      ${date} ${time} CET
# REVISION:     ---
#===============================================================================

use strict;
use warnings;</template><template context="perl" description="POD block from begin to end" enabled="true" name="=pod / =cut">=pod

${cursor}

=cut</template><template context="perl" description="End of POD block" enabled="true" name="=cut">=cut

${cursor}</template><template context="perl" description="Formatting region text/code/data" enabled="true" name="=for / =cut">=for ${formatname}

${cursor}

=end ${formatname}</template><template context="perl" description="HTML documentation" enabled="true" name="=begin html / =end">=begin  html

${cursor}

=end    html  #  back to Perl</template><template context="perl" description="man pages documentation" enabled="true" name="=begin man / =end">=begin  man 

${cursor}

=end    man   #  back to Perl</template><template context="perl" description="plain text documentation" enabled="true" name="=begin text / =end">=begin  text

${cursor}

=end    text  #  back to Perl</template><template context="perl" description="headline 1" enabled="true" name="=head1">=head1 ${cursor}</template><template context="perl" description="headline 2" enabled="true" name="=head2">=head2 ${cursor}</template><template context="perl" description="headline 3" enabled="true" name="=head3">=head3 ${cursor}</template><template context="perl" description="list" enabled="true" name="=over .. =back">=over ${indent level}

=item *

${cursor}

=item *



=back</template><template context="perl" description="list item" enabled="true" name="=item *">=item *

${cursor}</template><template context="perl" description="bold" enabled="true" name="= B&lt;&gt;">B&lt;${cursor}&gt;</template><template context="perl" description="literal" enabled="true" name="= C&lt;&gt;">C&lt;${cursor}&gt;</template><template context="perl" description="escape" enabled="true" name="= E&lt;&gt;">E&lt;${cursor}&gt;</template><template context="perl" description="filename" enabled="true" name="= F&lt;&gt;">F&lt;${cursor}&gt;</template><template context="perl" description="italic" enabled="true" name="= I&lt;&gt;">I&lt;${cursor}&gt;</template><template context="perl" description="link" enabled="true" name="= L&lt;&gt;">L&lt;${cursor}|&gt;</template><template context="perl" description="nobr. spaces" enabled="true" name="= S&lt;&gt;">S&lt;${cursor}&gt;</template><template context="perl" description="index" enabled="true" name="= X&lt;&gt;">X&lt;${cursor}&gt;</template><template context="perl" description="zero-width" enabled="true" name="= Z&lt;&gt;">Z&lt;${cursor}&gt;</template><template context="perl" description="do while loop" enabled="true" name="do-while">do {
	${cursor}
} 
while ( ${condition} );</template><template context="perl" description="foreach loop" enabled="true" name="foreach">foreach my ${var} ( ${list} ) {
	${cursor}
}</template><template context="perl" description="unless condition" enabled="true" name="unless">unless (${condition}) {
	${cursor}
} # unless</template><template context="perl" description="unless else condition" enabled="true" name="unless-else">unless (${condition}) {
	${cursor}
} else {
  
} # unless</template><template context="perl" description="until-loop" enabled="true" name="until">until (${condition}) {
	${cursor}
} # until</template><template context="perl" description="while loop" enabled="true" name="while">while (${condition}) {
	${cursor}
} # while</template><template context="perl" description="Test regular expression" enabled="true" name="regex match">$${var} =~ m/${regex}/</template><template context="perl" description="Test regular expression" enabled="true" name="regex missmatch">$${var} !~ m/${regex}/</template><template context="perl" description="Replace with regular expression" enabled="true" name="regex replace">$$${var} =~ s/${reg_search}/${reg_replace}/</template><template context="perl" description="Replace with transliteration" enabled="true" name="transliteration">$$${var} =~ tr/${source}/${replace}/</template><template context="perl" description="Assign a here document to a variable" enabled="true" name="here">my $$${herevar} = &lt;&lt;${HEREMARK};
${cursor}
${HEREMARK}</template><template context="perl" description="The time at which the script began running, in seconds since the epoch." enabled="true" name="$^T ">$$^T</template><template context="perl" description="Name of the Perl script file name being executed." enabled="true" name="$0">$$0</template><template context="perl" description="Current value of the write accumulator for format lines. " enabled="true" name="$^A">$$^A</template><template context="perl" description="Default input and pattern searching variable." enabled="true" name="$_">$$_</template><template context="perl" description="Default input and pattern searching variable." enabled="true" name="$ARG (long version)">$$ARG</template><template context="perl" description="Default input and pattern searching variable." enabled="true" name="$ARG (short version)">$$_</template><template context="perl" description="The array containing the command-line arguments intended for the script. " enabled="true" name="@ARGV">@ARGV</template><template context="perl" description="Current value of the debugging flags." enabled="true" name="$^D">$$^D</template><template context="perl" description="Effective gid of this process." enabled="true" name="$)">$$)</template><template context="perl" description="Effective uid of this process." enabled="true" name="$&gt;">$$&gt;</template><template context="perl" description="line number of the last file handle that was read.'" enabled="true" name="$.'">$$.</template><template context="perl" description="Current line number of the last file handle that was read." enabled="true" name="$. (short version)">$$.</template><template context="perl" description="Output field separator for the print operator" enabled="true" name="$,">$$,</template><template context="perl" description="Input separator. Default=newline." enabled="true" name="$/">$$/</template><template context="perl" description="Output record separator. Default=newline" enabled="true" name="$\">$$\</template><template context="perl" description="Subscript separator for multidimensional array emulation. Default=034." enabled="true" name="$;">$$;</template><template context="perl" description="Format output character for formfeed. Default=f." enabled="true" name="$^L">$$^L</template><template context="perl" description="Set of characters meaning a line break (next line starting with ^)in a format. Default=n." enabled="true" name="$:">$$:</template><template context="perl" description="Output format for printed numbers (deprecated)." enabled="true" name="$#">$$#</template><template context="perl" description="Return value from last pipe close, backtick (``) command, system operator." enabled="true" name="$?">$$?</template><template context="perl" description="Last System Error; Numeric context: errno no; string context: system error string." enabled="true" name="$!">$$!</template><template context="perl" description="Syntax error message from the last eval command" enabled="true" name="$@">$$@</template><template context="perl" description="The pid of the running perl this script." enabled="true" name="$$">$$$$</template><template context="perl" description="Real user ID (uid) of running perl script." enabled="true" name="$&lt;">$$&lt;</template><template context="perl" description="Real group ID (gid) of running perl script." enabled="true" name="$(">$$(</template><template context="perl" description="Index of the first element in an array / the first character in a substring. Default=0" enabled="true" name="$[">$$[</template><template context="perl" description="Perl version plus patchlevel divided by 1000." enabled="true" name="$]">$$]</template><template context="perl" description="The revision, version, and subversion of the Perl interpreter" enabled="true" name="$^V">$^V</template><template context="perl" description="Extended error message (platform depending)." enabled="true" name="$^E">$$^E</template><template context="perl" description="Maximum system file descriptor." enabled="true" name="$^F">$$^F</template><template context="perl" description="Internal compiler hints enabled by some modules. " enabled="true" name="$^H">$$^H</template><template context="perl" description="Value of the inplace-edit extension. Use undef to disable inplace editing." enabled="true" name="$^I">$$^I</template><template context="perl" description="Contents can be used as an emergency memory pool in case of out-of-memory error. Requires a special compilation of Perl." enabled="true" name="$^M">$$^M</template><template context="perl" description="Name of the operating ystem Perl binary was compiled for." enabled="true" name="$^O">$$^O</template><template context="perl" description="Internal flag, cleared by debugger to not debug itself." enabled="true" name="$^P">$$^P</template><template context="perl" description="The result of evaluation of the last successful (?{ code }) regular expression assertion." enabled="true" name="$^R">$$^R</template><template context="perl" description="Current state of the interpreter." enabled="true" name="$^S">$$^S</template><template context="perl" description="The current value of the warning switch, either true or false." enabled="true" name="$^W">$$^W</template><template context="perl" description="Perls name that itself was executed as." enabled="true" name="$^X">$$^X</template><template context="perl" description="Name of the current file when reading from &lt;ARGV&gt;." enabled="true" name="$ARGV">$$ARGV</template><template context="perl" description="List of library directories, used by do, require, or use constructs. " enabled="true" name="@INC">@INC</template><template context="perl" description="Hash containing filename of each file that has been included by do or require." enabled="true" name="%INC">%INC</template><template context="perl" description="Array into which the input lines are split when the -a command-line switch is given. " enabled="true" name="@F">@F</template><template context="perl" description="Hash containing current environment variables." enabled="true" name="%ENV">%ENV</template><template context="perl" description="Hash used to set signal handlers for various signals." enabled="true" name="%SIG">%SIG</template><template context="perl" description="Value of the default handler for a signal" enabled="true" name="handler DEFAULT">DEFAULT</template><template context="perl" description="Value of the default handler for a signal" enabled="true" name="DEFAULT">DEFAULT</template><template context="perl" description="Signal handler value to ignore the signal" enabled="true" name="handler IGNORE">IGNORE</template><template context="perl" description="POSIX signal End process (abort). Example: $SIG{ABRT}='my_sigabrt_handler';" enabled="true" name="signal (POSIX) ABRT">ABRT</template><template context="perl" description="POSIX signal Alarm clock. Example: $SIG(ALRM)='my_sigalrm_handler'" enabled="true" name="signal (POSIX) ALRM">ALRM</template><template context="perl" description="POSIX signal Example: $SIG(CHLD). Example: $SIG(CHLD)='my_sigchld_handler'" enabled="true" name="signal (POSIX) CHLD">CHLD</template><template context="perl" description="POSIX signal Example: $SIG(CONT)='my_sigcont_handler'" enabled="true" name="signal (POSIX) CONT">CONT</template><template context="perl" description="POSIX signal Floating-point exception. Example: $SIG(FPE)='my_sigfpe_handler'" enabled="true" name="signal (POSIX) FPE">FPE</template><template context="perl" description="POSIX signal Hangup. Example: $SIG(HUP)='my_sighup_handler'" enabled="true" name="signal (POSIX) HUP">HUP</template><template context="perl" description="POSIX signal Illegal instruction. Example: $SIG(ILL)='my_sigill_handler'" enabled="true" name="signal (POSIX) ILL">ILL</template><template context="perl" description="POSIX signal Interrupt. Example: $SIG(INT)='my_sigint_handler'" enabled="true" name="signal (POSIX) INT">INT</template><template context="perl" description="POSIX signal Kill (cannot be caught or ignored)." enabled="true" name="signal (POSIX) KILL">KILL</template><template context="perl" description="POSIX signal Write on a pipe when there is no process to read it. Example: $SIG(PIPE)='my_sigpipe_handler'" enabled="true" name="signal (POSIX) PIPE">PIPE</template><template context="perl" description="POSIX signal Quit. Example: $SIG(QUIT)='my_sigquit_handler'" enabled="true" name="signal (POSIX) QUIT">QUIT</template><template context="perl" description="POSIX signal Segmentation violation. Example: $SIG(SEGV)='my_sigsegv_handler'" enabled="true" name="signal (POSIX) SEGV">SEGV</template><template context="perl" description="POSIX signal Stop (cannot be caught or ignored)." enabled="true" name="signal (POSIX) STOP">STOP</template><template context="perl" description="POSIX signal Software termination signal. Example: $SIG(TERM)='my_sigterm_handler'" enabled="true" name="signal (POSIX) TERM">TERM</template><template context="perl" description="POSIX signal Interactive stop. Example: $SIG(TSTP)='my_sigtstp_handler'" enabled="true" name="signal (POSIX) TSTP">TSTP</template><template context="perl" description="POSIX signal Background read attempted from control terminal. Example: $SIG(TTIN)='my_sigttin_handler'" enabled="true" name="signal (POSIX) TTIN">TTIN</template><template context="perl" description="POSIX signal Background write attempted from control terminal. Example: $SIG(TTOU)='my_sigttou_handler'" enabled="true" name="signal (POSIX) TTOU">TTOU</template><template context="perl" description="POSIX signal User-defined signal 1. Example: $SIG(USR1)='my_sigusr1_handler'" enabled="true" name="signal (POSIX) USR1">USR1</template><template context="perl" description="POSIX signal User-defined signal 2. Example: $SIG(USR2)='my_sigusr2_handler'" enabled="true" name="signal (POSIX) USR2">USR2</template><template context="perl" description="Filehandle that iterates over command line filenames in @ARGV. Usually written as the null filehandle in &lt;&gt;." enabled="true" name="&lt;ARGV&gt;">&lt;ARGV&gt;</template><template context="perl" description="Standard error output stream" enabled="true" name="STDERR">STDERR</template><template context="perl" description="Standard input stream" enabled="true" name="&lt;STDIN&gt;">&lt;STDIN&gt;</template><template context="perl" description="Standard output stream" enabled="true" name="STDOUT">STDOUT</template><template context="perl" description="The special filehandle that refers to anything following the __END__ token in the file containing the script." enabled="true" name="&lt;DATA&gt;">&lt;DATA&gt;</template><template context="perl" description="Contains the text matched by the corresponding set of parentheses in the last pattern matched." enabled="true" name="$digit">$$digit</template><template context="perl" description="The string matched by the last successful pattern match." enabled="true" name="$&amp;">$$&amp;</template><template context="perl" description="The string preceding whatever was matched by the last successful pattern match." enabled="true" name="$`">$$`</template><template context="perl" description="The string following whatever was matched by the last successful pattern match." enabled="true" name="$'">$$'</template><template context="perl" description="The last bracket matched by the last search pattern." enabled="true" name="$+">$$+</template><template context="perl" description="If set to nonzero, forces an fflush(3) after every write or print on the currently selected output channel." enabled="true" name="$|">$$|</template><template context="perl" description="The current page number of the currently selected output channel." enabled="true" name="$%">$$%</template><template context="perl" description="The current page length (printable lines) of the currently selected output channel. Default is 60." enabled="true" name="$=">$$=</template><template context="perl" description="The number of lines left on the page of the currently selected output channel." enabled="true" name="$-">$$-</template><template context="perl" description="The name of the current report format for the currently selected output channel. Default is the name of the filehandle." enabled="true" name="$~">$$~</template><template context="perl" description="The name of the current top-of-page format for the currently selected output channel. Default is the name of the filehandle with _TOP appended." enabled="true" name="$^">$$^</template><template context="perl" description="Array holds the offsets of the ends of the last successful submatches." enabled="true" name="@+">$@+</template><template context="perl" description="Array holds the offsets of the ends of the last successful submatches." enabled="true" name="@LAST_MATCH_END (long version)">$@LAST_MATCH_END</template><template context="perl" description="Array holds the offsets of the ends of the last successful submatches." enabled="true" name="@LAST_MATCH_END (short version)">$@+</template><template context="perl" description="Offsets of the start of the substring matched by each subpatterns." enabled="true" name="@-">$@-</template><template context="perl" description="Offsets of the start of the substring matched by each subpatterns." enabled="true" name="@LAST_MATCH_START (long version)">$@LAST_MATCH_START</template><template context="perl" description="Offsets of the start of the substring matched by each subpatterns." enabled="true" name="@LAST_MATCH_START (short version)">$@-</template><template context="perl" description="Standard print command" enabled="true" name="print">print "${cursor}\n";</template><template context="perl" description="Any alphanumeric, that is, an alpha or a digit." enabled="true" name="character class [:alnum:]">[:alnum:]</template><template context="perl" description="Any letter. (That's a lot more letters than you think, unless you're thinking Unicode, in which case it's still a lot.)" enabled="true" name="character class [:alpha:]">[:alpha:]</template><template context="perl" description="Any character with an ordinal value between 0 and 127." enabled="true" name="character class [:ascii:]">[:ascii:]</template><template context="perl" description="Any control character. " enabled="true" name="character class [:cntrl:]">[:cntrl:]</template><template context="perl" description="A character representing a decimal digit, such as 0 to 9. " enabled="true" name="character class [:digit:]">[:digit:]</template><template context="perl" description="Any alphanumeric or punctuation character.Any alphanumeric or punctuation character." enabled="true" name="character class [:graph:]">[:graph:]</template><template context="perl" description="A lowercase letter." enabled="true" name="character class [:lower:]">[:lower:]</template><template context="perl" description="Any alphanumeric or punctuation character or space." enabled="true" name="character class [:print:]">[:print:]</template><template context="perl" description="Any punctuation character." enabled="true" name="character class [:punct:]">[:punct:]</template><template context="perl" description="Any space character. Includes tab, newline, form feed, and carriage return.Any uppercase " enabled="true" name="character class [:space:]">[:space:]</template><template context="perl" description="Any uppercase letter" enabled="true" name="character class [:upper:]">[:upper:]</template><template context="perl" description="Any identifier character, either an alnum or underline." enabled="true" name="character class [:word:]">[:word:]</template><template context="perl" description="Any hexadecimal digit. Though this may seem silly ([0-9a-fA-F] works just fine)" enabled="true" name="character class [:xdigit:]">[:xdigit:]</template><template context="perl" description="Any alphanumeric, that is, an alpha or a digit." enabled="true" name="class [:alnum:]">[:alnum:]</template><template context="perl" description="Any letter. (That's a lot more letters than you think, unless you're thinking Unicode, in which case it's still a lot.)" enabled="true" name="class [:alpha:]">[:alpha:]</template><template context="perl" description="Any character with an ordinal value between 0 and 127." enabled="true" name="class [:ascii:]">[:ascii:]</template><template context="perl" description="Any control character. " enabled="true" name="class [:cntrl:]">[:cntrl:]</template><template context="perl" description="A character representing a decimal digit, such as 0 to 9. " enabled="true" name="class [:digit:]">[:digit:]</template><template context="perl" description="Any alphanumeric or punctuation character.Any alphanumeric or punctuation character." enabled="true" name="class [:graph:]">[:graph:]</template><template context="perl" description="A lowercase letter." enabled="true" name="class [:lower:]">[:lower:]</template><template context="perl" description="Any alphanumeric or punctuation character or space." enabled="true" name="class [:print:]">[:print:]</template><template context="perl" description="Any punctuation character." enabled="true" name="class [:punct:]">[:punct:]</template><template context="perl" description="Any space character. Includes tab, newline, form feed, and carriage return.Any uppercase " enabled="true" name="class [:space:]">[:space:]</template><template context="perl" description="Any uppercase letter" enabled="true" name="class [:upper:]">[:upper:]</template><template context="perl" description="Any identifier character, either an alnum or underline." enabled="true" name="class [:word:]">[:word:]</template><template context="perl" description="Any hexadecimal digit. Though this may seem silly ([0-9a-fA-F] works just fine)" enabled="true" name="class [:xdigit:]">[:xdigit:]</template><template context="perl" description="Test: file age since inode change" enabled="true" name="test: file age since inode change">-C</template><template context="perl" description="Test: file age since last access" enabled="true" name="test: file age since last access">-A</template><template context="perl" description="Test: file age since modification" enabled="true" name="test: file age since modification">-M</template><template context="perl" description="Test: file is binary file" enabled="true" name="test: file is binary file">-B</template><template context="perl" description="Test: file is block special file" enabled="true" name="test: file is block special file">-b</template><template context="perl" description="Test: file is character special file" enabled="true" name="test: file is character special file">-c</template><template context="perl" description="Test: file is directory" enabled="true" name="test: file is directory">-d</template><template context="perl" description="Test: file is plain file" enabled="true" name="test: file is plain file">-f</template><template context="perl" description="Test: file is named pipe" enabled="true" name="test: file is named pipe">-p</template><template context="perl" description="Test: file is text file" enabled="true" name="test: file is text file">-T</template><template context="perl" description="Test: file is socket" enabled="true" name="test: file is socket">-S</template><template context="perl" description="Test: file is symbolic link" enabled="true" name="test: file is symbolic link">-l</template><template context="perl" description="Test: file is readable by eff. UID/GID" enabled="true" name="test: file is readable by eff. UID/GID">-r</template><template context="perl" description="Test: file is readable by real UID/GID" enabled="true" name="test: file is readable by real UID/GID">-R</template><template context="perl" description="Test: file is writable by eff. UID/GID" enabled="true" name="test: file is writable by eff. UID/GID">-w</template><template context="perl" description="Test: file is writable by real UID/GID" enabled="true" name="test: file is writable by real UID/GID">-W</template><template context="perl" description="Test: file is executable by eff. UID/GID" enabled="true" name="test: file is executable by eff. UID/GID">-x</template><template context="perl" description="Test: file is executable by real UID/GID" enabled="true" name="test: file is executable by real UID/GID">-X</template><template context="perl" description="Test: file exists" enabled="true" name="test: file exists">-e</template><template context="perl" description="Test: file handle opened to a tty" enabled="true" name="test: file handle opened to a tty">-t</template><template context="perl" description="Test: file is owned by eff. UID" enabled="true" name="test: file is owned by eff. UID">-o</template><template context="perl" description="Test: file is owned by real UID" enabled="true" name="test: file is owned by real UID">-O</template><template context="perl" description="Test: file has setgid bit set" enabled="true" name="test: file has setgid bit set">-g</template><template context="perl" description="Test: file has setuid bit set" enabled="true" name="test: file has setuid bit set">-u</template><template context="perl" description="Test: file has sticky bit set" enabled="true" name="test: file has sticky bit set">-k</template><template context="perl" description="Test: file has nonzero size" enabled="true" name="test: file has nonzero size">-s</template><template context="perl" description="Test: file has zero size" enabled="true" name="test: file has zero size">-z</template><template context="perl" description="Quote the next metacharacter" enabled="true" name="regex \">\</template><template context="perl" description="Match the beginning of the line" enabled="true" name="regex ^">^</template><template context="perl" description="Match any character (except newline)" enabled="true" name="regex .">.</template><template context="perl" description="Match the end of the line (or before newline at the end)" enabled="true" name="regex $">$$</template><template context="perl" description="Alternation" enabled="true" name="regex |">|</template><template context="perl" description="Grouping" enabled="true" name="regex ()">()</template><template context="perl" description="Character class" enabled="true" name="regex []">[]</template><template context="perl" description="Match 0 or more times" enabled="true" name="regex *">*</template><template context="perl" description="Match 1 or more times" enabled="true" name="regex +">+</template><template context="perl" description="Match 1 or 0 times" enabled="true" name="regex ?">?</template><template context="perl" description="Match exactly n times" enabled="true" name="regex {n}">{n}</template><template context="perl" description="Match at least n times" enabled="true" name="regex {n,}">{n,}</template><template context="perl" description="Match at least n but not more than m times" enabled="true" name="regex {n,m}">{n,m}</template><template context="perl" description="Match 0 or more times" enabled="true" name="regex *?">*?</template><template context="perl" description="Match 1 or more times" enabled="true" name="regex +?">+?</template><template context="perl" description="Match 0 or 1 time" enabled="true" name="regex ??">??</template><template context="perl" description="Match exactly n times" enabled="true" name="regex {n}?">{n}?</template><template context="perl" description="Match at least n times" enabled="true" name="regex {n,}?">{n,}?</template><template context="perl" description="Match at least n but not more than m times" enabled="true" name="regex {n,m}?">{n,m}?</template><template context="perl" description="tab (HT, TAB)" enabled="true" name="regex \t">\t</template><template context="perl" description="newline (LF, NL)" enabled="true" name="regex \n">\n</template><template context="perl" description="return (CR)" enabled="true" name="regex \r">\r</template><template context="perl" description="form feed (FF)" enabled="true" name="regex \f">\f</template><template context="perl" description="alarm (bell) (BEL)" enabled="true" name="regex \a">\a</template><template context="perl" description="escape (think troff) (ESC)" enabled="true" name="regex \e">\e</template><template context="perl" description="octal char (think of a PDP-11)" enabled="true" name="regex \033">\033</template><template context="perl" description="hex char" enabled="true" name="regex \x1B">\x1B</template><template context="perl" description="wide hex char (Unicode SMILEY)" enabled="true" name="regex \x{263a}">\x{263a}</template><template context="perl" description="control char" enabled="true" name="regex \c[">\c[</template><template context="perl" description="named char" enabled="true" name="regex \N{name}">\N{${name}}</template><template context="perl" description="lowercase next char (think vi)" enabled="true" name="regex \l">\l</template><template context="perl" description="uppercase next char (think vi)" enabled="true" name="regex \u">\u</template><template context="perl" description="lowercase till E (think vi)" enabled="true" name="regex \L">\L</template><template context="perl" description="uppercase till E (think vi)" enabled="true" name="regex \U">\U</template><template context="perl" description="end case modification (think vi)" enabled="true" name="regex \E">\E</template><template context="perl" description="quote (disable) pattern metacharacters till E" enabled="true" name="regex \Q">\Q</template><template context="perl" description="Match a &quot;word&quot; character (alphanumeric plus &quot;_&quot;)" enabled="true" name="regex \w">\w</template><template context="perl" description="Match a non-word character" enabled="true" name="regex \W">\W</template><template context="perl" description="Match a whitespace character" enabled="true" name="regex \s">\s</template><template context="perl" description="Match a non-whitespace character" enabled="true" name="regex \S">\S</template><template context="perl" description="Match a digit character" enabled="true" name="regex \d">\d</template><template context="perl" description="Match a non-digit character" enabled="true" name="regex \D">D</template><template context="perl" description="Match P, named property.  Use p{Prop} for longer names." enabled="true" name="regex \pP">\pP</template><template context="perl" description="Match non-P" enabled="true" name="regex \PP">\PP</template><template context="perl" description="Match eXtended Unicode &quot;combining character sequence&quot;, equivalent to C&lt;(?:PMpM*)&gt;" enabled="true" name="regex \X">\X</template><template context="perl" description="Match a single C char (octet) even under utf8." enabled="true" name="regex \C">\C</template><template context="perl" description="Any alphanumeric, that is, an alpha or a digit." enabled="true" name="regex [:alnum:]">[:alnum:]</template><template context="perl" description="Any letter. (That's a lot more letters than you think, unless you're thinking Unicode, in which case it's still a lot.)" enabled="true" name="regex [:alpha:]">[:alpha:]</template><template context="perl" description="Any character with an ordinal value between 0 and 127." enabled="true" name="regex [:ascii:]">[:ascii:]</template><template context="perl" description="Any control character. " enabled="true" name="regex [:cntrl:]">[:cntrl:]</template><template context="perl" description="A character representing a decimal digit, such as 0 to 9. " enabled="true" name="regex [:digit:]">[:digit:]</template><template context="perl" description="Any alphanumeric or punctuation character.Any alphanumeric or punctuation character." enabled="true" name="regex [:graph:]">[:graph:]</template><template context="perl" description="A lowercase letter." enabled="true" name="regex [:lower:]">[:lower:]</template><template context="perl" description="Any alphanumeric or punctuation character or space." enabled="true" name="regex [:print:]">[:print:]</template><template context="perl" description="Any punctuation character." enabled="true" name="regex [:punct:]">[:punct:]</template><template context="perl" description="Any space character. Includes tab, newline, form feed, and carriage return.Any uppercase " enabled="true" name="regex [:space:]">[:space:]</template><template context="perl" description="Any uppercase letter" enabled="true" name="regex [:upper:]">[:upper:]</template><template context="perl" description="Any identifier character, either an alnum or underline." enabled="true" name="regex [:word:]">[:word:]</template><template context="perl" description="Any hexadecimal digit. Though this may seem silly ([0-9a-fA-F] works just fine)" enabled="true" name="regex [:xdigit:]">[:xdigit:]</template><template context="perl" description="Match a word boundary" enabled="true" name="regex \b">\b</template><template context="perl" description="Match a non-(word boundary)" enabled="true" name="regex \B">\B</template><template context="perl" description="Match only at beginning of string" enabled="true" name="regex \A">\A</template><template context="perl" description="Match only at end of string, or before newline at the end" enabled="true" name="regex \Z">\Z</template><template context="perl" description="Match only at end of string" enabled="true" name="regex \z">\z</template><template context="perl" description="Match only at pos() (e.g. at the end-of-match position of prior m//g)" enabled="true" name="regex \G">\G</template><template context="perl" description="Alteration; matches either pattern1 or pattern2" enabled="true" name="regex (pattern1|pattern2)">(${pattern1}|${pattern2})</template><template context="perl" description="This is for clustering, not capturing; it groups subexpressions like &quot;()&quot;, but doesn't make backreferences as &quot;()&quot; does." enabled="true" name="regex (?:pattern)">(?:${pattern})</template><template context="perl" description="This is for clustering, not capturing; it groups subexpressions like &quot;()&quot;, but doesn't make backreferences as &quot;()&quot; does." enabled="true" name="regex (?imsx-imsx:pattern)">(?${imsx}-${imsx}:${pattern})</template><template context="perl" description="A comment. The text is ignored." enabled="true" name="regex (?#text)">(?#${text})</template><template context="perl" description="This zero-width assertion evaluate any embedded Perl code." enabled="true" name="regex (?{code })">(?{${code}})</template><template context="perl" description="This is a &quot;postponed&quot; regular subexpression. The code is evaluated at run time, at the moment this subexpression may match." enabled="true" name="regex (??{code })">(??{${code}})</template><template context="perl" description="Zero-width negative look-ahead assertion." enabled="true" name="regex (?!pattern)">(?!${pattern})</template><template context="perl" description="Zero-width positive look-ahead assertion." enabled="true" name="regex (?=pattern)">(?=${pattern})</template><template context="perl" description="Zero-width positive look-behind assertion." enabled="true" name="regex (?&lt;=pattern)">(?&lt;=${pattern})</template><template context="perl" description="A zero-width negative look-behind assertion." enabled="true" name="regex (?&lt;!pattern)">(?&lt;!${cursor})</template><template context="perl" description="Conditional expression." enabled="true" name="regex (?(condition)yes-pattern|no-pattern)">(?(${condition})${yes-pattern}|${no-pattern}))</template><template context="perl" description="Conditional expression." enabled="true" name="regex (?(condition)yes-pattern)">(?(${condition}${yes-pattern}))</template><template context="perl" description="One or more embedded pattern-match modifiers." enabled="true" name="regex (?imsx-imsx)">(?${imsx}-${imsx})</template><template context="perl" description="Divider line" enabled="true" name="div">#===================================================================</template><template context="perl" description="Environment variable" enabled="true" name="$ENV">$$ENV{${name}}</template><template context="perl" description="C-style for loop" enabled="true" name="for">for { my $$${var} = 0 ; $$${var} &lt; ${limit}; $$${var}++ ) {&#13;
    ${cursor}&#13;
}</template><template context="perl" description="if statement" enabled="true" name="if">if (${cursor}) {&#13;
  &#13;
} # if</template><template context="perl" description="if-elsif-else statement" enabled="true" name="if-elsif-else">if (${condition_1}) {&#13;
	${cursor}&#13;
} elsif (${condition_2}) { &#13;
	&#13;
} else { &#13;
	&#13;
} # if</template><template context="perl" description="if-else statement" enabled="true" name="if-else">if (${cursor}) {&#13;
&#13;
} else { &#13;
&#13;
} # if</template><template context="perl" description="eval exception-handling template" enabled="true" name="eval-exception">eval { ${cursor} };&#13;
if ($$@) {&#13;
    warn $$@;&#13;
}</template><template context="perl" description="subroutine as method template" enabled="true" name="method">sub ${cursor}${name} () {&#13;
    my ($$self) = @_;&#13;
    &#13;
} ${name}</template><template context="perl" description="while each key value pair" enabled="true" name="while">while (($$key, $$value) = each (%${cursor})) {&#13;
    &#13;
} # while</template><template context="perl" description="while diamond" enabled="true" name="while">while (&lt;&gt;) {&#13;
  ${cursor}&#13;
} # while</template><template context="perl" description="switch construction from perlsyn" enabled="true" name="switch">SWITCH: {&#13;
  (${cursor}) &amp;&amp; do {&#13;
     ; &#13;
     last SWITCH&#13;
  };&#13;
  &#13;
  // &amp;&amp; do {&#13;
     ; &#13;
     last SWITCH&#13;
  };&#13;
} # switch</template><template context="perl" description="map" enabled="true" name="map">map { ${cursor} }</template><template context="perl" description="grep" enabled="true" name="grep">grep { ${cursor} }</template><template context="perl" description="pod head4" enabled="true" name="=head4">=head4 ${cursor}</template><template context="perl" description="pod cut" enabled="true" name="=cut">=cut&#13;
&#13;
${cursor}</template><template context="perl" description="pod indent" enabled="true" name="=over">=over 4&#13;
&#13;
=item ${cursor}&#13;
&#13;
=back</template><template context="perl" description="pod indent" enabled="true" name="=item">=item ${cursor}</template><template context="perl" description="else clause" enabled="true" name="else">else {
    ${cursor}
}</template><template context="perl" description="parameter declaration for a function" enabled="true" name="parameters">my (${cursor}) = @_;</template><template context="perl" description="elsif statement" enabled="true" name="elsif">elsif (${cursor}) {
    
}</template><template context="perl" description="printf statement" enabled="true" name="printf">printf ("%s${cursor}\n", );</template><template context="perl" description="open input stream" enabled="true" name="open file for input">open(IN, "${Filename}") or die "could not open ${Filename}\n";
while(&lt;IN&gt;)
{
    ${cursor}
}
close IN;</template><template context="perl" description="open pipe input stream" enabled="true" name="open pipe for input">open(IN, "${Program} |") or die "could not execute ${Program}\n";
while(&lt;IN&gt;)
{
    ${cursor}
}
close IN;</template><template context="perl" description="open output stream" enabled="true" name="open file for output">open(OUT, "&gt; ${Filename}") or die "could not write ${Filename}\n";
${cursor}
close OUT;</template><template context="perl" description="open pipe output stream" enabled="true" name="open pipe for output">open(OUT, "| ${Program}") or die "could not execute ${Program}\n";
${cursor}
close OUT;</template><template context="perl" description="filter input stream to output stream" enabled="true" name="filter">open(IN, "&lt; ${Inputfilename}") 
  or die "could not open ${Inputfilename}\n";
open(OUT, "&gt; ${Outputfilename}") 
  or die "could not write ${Outputfilename}\n";
while(&lt;IN&gt;)
{
    ${cursor}
    print OUT $$_;
}
close OUT; close IN;</template><template context="perl" description="Example for the File::Find find usage" enabled="true" name="File::Find sub">#===================================================================
sub workOnFile
{
    if ( -d _ &amp;&amp;  /^public/) {
	$$File::Find::prune = 1;
	return;
    }
    # print "Entering: $$File::Find::name\n" if -d _;
    return unless /\.(bak|sik|ttt)$$/;
    print "$$File::Find::name\n";
    return;
}

#===================================================================
# ARGV contains toplevel dirs
@ARGV = ( '.' ) unless (scalar @ARGV);
find(\&amp;workOnFile, @ARGV);</template><template context="perl" description="Example for the File::Find finddepth usage" enabled="true" name="File::Find finddepth sub">#===================================================================
sub workOnFile {
    print "Done: $$File::Find::name\n" if -d _;
    return unless -f _;
    print "$$File::Find::name\n";
    return;
}

#===================================================================
# ARGV contains toplevel dirs
@ARGV = ( '.' ) unless (scalar @ARGV);
finddepth(\&amp;workOnFile, @ARGV);</template><template context="perl" description="Standard input stream" enabled="true" name="STDIN">STDIN</template><template context="perl" description="manipulate @INC at compile time" enabled="true" name="use lib">use lib ${cursor};</template><template context="perl" description="Locate directory of original perl script and add sibling lib dir" enabled="true" name="use FindBin + use lib">use FindBin;&#13;
&#13;
use lib "$$FindBin::Bin/../lib";</template><template context="perl" description="Extended processing of command line options" enabled="true" name="use Getopt::Long">use Getopt::Long;</template><template context="perl" description="filter input stream to output stream" enabled="true" name="open two files for input and output">open(IN, "&lt; ${Inputfilename}") 
  or die "could not open ${Inputfilename}\n";
open(OUT, "&gt; ${Outputfilename}") 
  or die "could not write ${Outputfilename}\n";
while(&lt;IN&gt;)
{
    ${cursor}
    print OUT $$_;
}
close OUT; close IN;</template></templates>